package com.vti.api;

import javax.security.auth.login.LoginException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseCookie;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.vti.model.LoginRequest;
import com.vti.security.JwtUtils;
import com.vti.security.UserDetailsImpl;
import com.vti.model.*;

@RestController
@RequestMapping("/api/v1")
public class ClientApiController {

	@Autowired
	AuthenticationManager authenticationManager;
	@Autowired
	JwtUtils jwtUtil;

	@PostMapping("/auth/login")
	public ResponseEntity<?> login(@RequestBody LoginRequest request) throws LoginException {
			Authentication authentication = authenticationManager
					.authenticate(new UsernamePasswordAuthenticationToken(request.getEmail(), request.getPassword()));
			SecurityContextHolder.getContext().setAuthentication(authentication);

			UserDetails userDetails = (UserDetailsImpl) authentication.getPrincipal();
	
			ResponseCookie accessCookie = jwtUtil.generateJwtCookie(userDetails);
			
			return ResponseEntity.ok()
					.header(HttpHeaders.SET_COOKIE, accessCookie.toString())
					.body("Accesss")
					.build();

	}
}