package com.vti.security;

import java.io.IOException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;
import org.springframework.web.filter.OncePerRequestFilter;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@Component
public class JwtAuthenticationFilter extends OncePerRequestFilter {
	private static Logger log = LoggerFactory.getLogger(JwtAuthenticationFilter.class);
	
	   @Autowired
	    private JwtUtils tokenProvider;

	    @Autowired
	    private UserDetailsServiceImpl userDetailsService;
	    
	    @Override
	    protected void doFilterInternal(HttpServletRequest request,
	                                    HttpServletResponse response, FilterChain filterChain)
	            throws ServletException, IOException {
	        try {
	            // Lấy jwt từ request
	            String jwt = getJwtFromRequest(request);

	            if (StringUtils.hasText(jwt)&& tokenProvider.validateToken(jwt)) {
	                // Lấy user email từ chuỗi jwt
	                String userEmail = tokenProvider.getUserEmailFromJWT(jwt);
	                // Lấy thông tin người dùng từ email
	                UserDetails userDetails = userDetailsService.loadUserByUsername(userEmail);
	                if(userDetails != null) {
	                    // Nếu người dùng hợp lệ, set thông tin cho Seturity Context
	                    UsernamePasswordAuthenticationToken
	                            authentication = new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());
	                    authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));

	                    SecurityContextHolder.getContext().setAuthentication(authentication);
	                }
	            }
	        } catch (Exception ex) {
	            log.error("failed on set user authentication", ex);
	        }

	        filterChain.doFilter(request, response);
	    }

	    private String getJwtFromRequest(HttpServletRequest request) {
	        String bearerToken = request.getHeader("Authorization");
	        if (StringUtils.hasText(bearerToken) && bearerToken.startsWith("Bearer ")) {
	            return bearerToken.substring(7);
	        }
	        return null;
	    }
}